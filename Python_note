List:
	list_var = [1, 2, 3]: a list named list_var
	list_var.append(data): add data to list
	list_var.pop(): pop the last data
		.pop(1): pop the first data
		.sort(key,reverse): 1,2,3
	len(list_var): show how many data in the list
	new_list = sorted(list_var, key, reverse)
	sum(new_list): sum of the list

Dictionary:
	{"key":"value"}

Tuple:
	tup = ((1,2),(3,4))
	The value of tup[0][0] is 1
	tup += (5,6) ==> ((1,2),(3,4),5,6)

For loop:
	for item in list:

While loop:
	while range:

	isinstance(cmp1,cmp2) ==> true or false

String substitution:
	"My name is {var}".format(var = "Lawrence")
	==> My name is Lawrence
	"%s" %("string"): show string
	"%.2f" %(2.1130): show 2.11

Date:
	import datetime
	datetime.date.today(): show date
	datetime.datetime.now(): show accuracy to millisecond

Import:
	if we want to import a file in the folder, we should
	make a __init__.py file in the folder.
	
	from folder_name.file_name import class_name, def_name

smtplib:
	A method that can send a email by our local computer.
	import smtplib
	obj = SMTP(host, port): connect to smtp server
	obj.ehlo(): Identification
	obj.starttls(): Encrypt all the SMTP commands
	obj.login(username, password): Log in on an SMTP server	
	obj.sendmail(from_addr, to_addr, msg): send a message
	obj.quit(): Close the connection
	
email:
	Response to construct the contents of the mail.
	form email.mime.text import MIMEText
	from email.mime.mltipart import MIMEMultipart
	msg = MIMEMultipart("alternative")
	msg['From'] = from_addr
	msg['To'] = to_addr
	msg['Subject'] = "subject": make a mail title
	.attach(): add to the mail construction
	msg.attach(MIMEText("contents", 'format', 'encode')): mail contents
	
	msg.att = MIMEText(open('filename','r').read(), 'base64', 'utf-8')
	att["Content-Type"] = 'application/octet-stream'
	att["Content-Disposition"] = 'attachment; filename="filename"'
	msg.attach(att): add file to the mail

os:
	import os
	os.path.join(path): join the path
	os.getcwd(): show the current working direction
	os.path.isfile(path): if the path is valid retrun True
csv:
	import csv
	with open("data.csv", "w+") as csvfile: let csvfile substitute the (open .csv file)
	writer = csv.writer(csvfile)
		    .DictWriter(csvfile,fieldname): write dictionary. Fieldname = ["key1", "key2"]
		    .weiterheader(): write fieldname on the top
	writer.writerow(["1","2"]): write data into data.csv 
	open("file_name","mode"):
		mode: "r"--read only, 
		      "rb"--read in binary format 
		      "r+"--read and write
		      "w"--write only
		      "w+"--read and write
		      Overwrite exisiting file or create a new file.
		      "a"--append to exisiting file or create a new one
	reader = csv.reader(csvfile)
		    .DictReader()

web scraping:
	import requests
	from bs4 import BeautifulSoup
	requests.get('url'): get the source code
	.status_code: show the status of the page
	.text: show the page context
	.content: storage in byte
	BeautifulSoup(.text, 'html.parser'): show in html format
	findAll(): find the context we want

numpy:
	import numpy as np
	np.array([1,2,3]): array
	
	Array isn't like list. 
	List can append new element, but array cannot. 
	Array can directly do element arithmetic but list cannot.

	np.inner(a,b): inner product
	np.outer(a,b): outer product
	np.trace(a): the trace of a
	np.cov(): covariance
	np.arccos(a): get arccosine a
	np.matrix([[1,2],[3,4]]): we also can use 
				  np.array([[1,2],[3,4]])
	np.random.random((10,10)): make a 10x10 matrix and each value 				 	  of elements is 0~1
	np.random.randn(10,10): make a 10x10 matrix and each value of
				elements is -1~1
	np.diag(): diagonal element
	np.linalg.norm(a): get norm a
	np.linalg.inv(a): get inverse matrix of a
	np.linalg.det(a): get determinant of a
	np.linalg.eig(): the eigenvalue
	np.linalg.eigh(): the eigenvalue of symmetric or Hermitian
			  matrix
	np.linalg.solve(A,b): solve Ax=b

	A.T: transpose of matrix A.
	.shape: mxn matrix
	a.sum(): summation of all the element in a
	a.dot(b): vecter a dot b or matrix multiplication
	.mean(): get average
	.var(): get variance
	












